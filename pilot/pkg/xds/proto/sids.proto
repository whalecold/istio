// Copyright Istio Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package istio.mesh.v1alpha1;

option go_package = "istio.io/istio/pilot/pkg/xds/proto";

// ServiceInstance represents an individual instance of a specific version
// of a service. It binds a network endpoint (ip:port), the service
// description (which is oblivious to various versions) and a set of labels
// that describe the service version associated with this instance.
//
// The labels associated with a service instance are unique per a network endpoint.
// There is one well defined set of labels for each service instance network endpoint.
//
// For example, the set of service instances associated with catalog.mystore.com
// are modeled like this
//
//	--> IstioEndpoint(172.16.0.1:8888), Service(catalog.myservice.com), Labels(foo=bar)
//	--> IstioEndpoint(172.16.0.2:8888), Service(catalog.myservice.com), Labels(foo=bar)
//	--> IstioEndpoint(172.16.0.3:8888), Service(catalog.myservice.com), Labels(kitty=cat)
//	--> IstioEndpoint(172.16.0.4:8888), Service(catalog.myservice.com), Labels(kitty=cat)
message ServiceInstance {
	message Service {
	    // Name is "destination.service.name" attribute
	    string name = 1;
	    // Namespace is "destination.service.namespace" attribute
	    string namespace = 2;
	    // Name of the service, e.g. "catalog.mystore.com"
	    string host = 3;
	}

	message Endpoint {
	    // Labels points to the workload or deployment labels.
	    map<string, string> labels = 1;
	    // Address is the address of the instance.
	    string address = 2;
	    // ServicePortName tracks the name of the port.
	    string service_port_name = 3;
	    // EndpointPort is the port where the workload is listening, can be different
	    // from the service port.
	    int32 endpoint_port = 4;
	}
	Service service = 1;
	repeated Endpoint endpoints = 3;
}

